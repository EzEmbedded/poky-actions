name: Build-Poky
on:
  workflow_dispatch:
env:
  TZ: Asia/Shanghai


# Action will return to the startup working directory every run
jobs:
  download-src:
    runs-on: ubuntu-18.04
    # if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - uses: actions/checkout@v2
      - name: Initialization running environment
        run: |
            sudo ln -sf /bin/bash /bin/sh 
            sudo mkdir -p /Poky && sudo -E chmod 777 /Poky
            sudo mkdir -p /Poky/myscripts && sudo -E chmod 777 /Poky/myscripts
            echo "WORKDIR=/Poky" >> $GITHUB_ENV
            cp scripts/*.sh /Poky/myscripts
            chmod +x /Poky/myscripts/*.sh
            /Poky/myscripts/extern-disk-space.sh
            /Poky/myscripts/install-yocto-need-pakages.sh
      - name: fetch src
        run: |
          cd /Poky
          /Poky/myscripts/build-amlogic-S-64-yocto.sh
          pwd
          ls build/downloads -al



 
           # echo "WORKDIR=/Yocto" >> $GITHUB_ENV
           # echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}


      

      # - name: Setup building environment
      #   run: |
      #       df -h
      #       sudo ln -sf /bin/bash /bin/sh 
      #       #/home/runner/work/meta-meson/meta-meson
      #       sudo mkdir -p /Yocto && sudo -E chmod 777 /Yocto
      #       sudo mkdir -p /UPReleaseDir && sudo -E chmod 777 /UPReleaseDir
      #       sudo mkdir -p /DLReleaseDir && sudo -E chmod 777 /DLReleaseDir
      #       echo "test release" > release.txt
      #       cp release.txt /UPReleaseDir
      #       echo "WORKDIR=/Yocto" >> $GITHUB_ENV
      #       echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      # - name: get latest release tag
      #   id: get-latest-release
      #   uses: pozetroninc/github-action-get-latest-release@master
      #   with: 
      #     owner: ${{ github.event.repository.owner.login }}
      #     repo: ${{ github.event.repository.name }}
      #     excludes: prerelease, draft             

      # - name: show latest release tag
      #   run: |
      #     echo ${{steps.get-latest-release.outputs.release}}

      # - name: download release-asset
      #   if: ${{ steps.get-latest-release.outputs.release == 'v1.2.9'}} 
      #   uses: i3h/download-release-asset@v1
      #   with:
      #     owner: ${{ github.event.repository.owner.login }}
      #     repo:  meta-meson    # ${{ github.event.repository.name }}
      #     tag: ${{ steps.get-latest-release.outputs.release }}
      #     # tag: ${{steps.tag.outputs.release_tag}}
      #     file: yocto-downloads.tar.gz.*
      #     path: /DLReleaseDir
      #     token: ${{ secrets.YOUR_TOKEN }}

      # - name: recovery src
      #   run: |
      #     cd /DLReleaseDir
      #     cat yocto-downloads.tar.gz.a* | tar -zxv
      #     ls -al
      #     df -h
      #     rm yocto-downloads.tar.gz.a* 
      #     ls -al
      #     df -h



      # - name: set new release tag
      #   id: tag
      #   run: |
      #     echo "::set-output name=release_tag::"v1.2.9""
      #     # touch release.txt
      #     # echo "* yocto deploy image for Ubuntu$(lsb_release -s -r)" >> release.txt
      #     # echo "::set-output name=status::success"





      # # - name: Display structure of downloaded files
      # #   run: ls -R
      # #   working-directory: path/to/artifact         

      # - name: Setup yocto
      #   run: |
      #       cd ${WORKDIR}
      #       git clone -b hardknott git://git.yoctoproject.org/poky
      #       df -h
      #       # dpigs -H --lines=300
      #       # sudo apt list --installed

      # - name: Download src
      #   timeout-minutes: 300
      #   continue-on-error: true     
      #   run: |
      #       cd ${WORKDIR}
      #       git clone https://github.com/EzEmbedded/meta-meson.git
      #       cp meta-meson/build-*.sh poky
      #       cd poky
      #       pwd
      #       chmod +x build-*.sh
      #       ./build-amlogic-S-64-yocto.sh

      # - name: Check disk usage
      #   run: |
      #       df -h
      #       # sleep 5m

      # - name: Pack  src
      #   run: |
      #       # cd /Yocto/poky/build/tmp
      #       # tar -Jcf yocto-image.tar.xz deploy/images
      #       # echo "PACKAGE=/Yocto/poky/build/tmp/yocto-image.tar.xz" >> $GITHUB_ENV
      #       cd /Yocto/poky/build
      #       du -h --max-depth=1 /Yocto/poky/build/
      #       du -h --max-depth=1 /Yocto/poky/build/downloads/
      #       du -h --max-depth=1 /Yocto/poky/build/cache/
      #       du -h --max-depth=1 /Yocto/poky/build/buildhistory/
      #       du -h --max-depth=1 /Yocto/poky/build/sstate-cache/
      #       du -h --max-depth=1 /Yocto/poky/build/tmp/


      #       # cat bitbake.lock
      #       ls -al
      #       #rm git files
      #       sudo rm -rf /Yocto/poky/build/downloads/git2/ >/dev/null 2>&1 
      #       tar  cvzf - downloads/ | split -b 1024m - yocto-downloads.tar.gz.
      #       ls -al
      #       mv yocto-downloads.tar.gz.* /UPReleaseDir
      #       mv collect-srcrevs.txt /UPReleaseDir
      #       # echo "PACKAGE=/UPReleaseDir/yocto-downloads.tar.gz.aa" >> $GITHUB_ENV
           
      #       # ../build-amlogic-up2wetransfer.sh

      # - name: Upload package
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: yocto deploy
      #     path: ${{env.PACKAGE}}

      # - name: Remove all Releases
      #   uses: dev-drprasad/delete-older-releases@v0.2.0
      #   with:
      #     keep_latest: 0
      #     delete_tags: true
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
 
      # - name: Upload  release
      #   id: release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "/UPReleaseDir/*"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag:  ${{steps.tag.outputs.release_tag}}

      # - name: Upload  release1
      #   id: release1
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "/UPReleaseDir/*"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag:  "v1.0.0"

      # - name: Upload  release2
      #   id: release2
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "/UPReleaseDir/*"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag:  "v2.0.0"

      # - name: Upload  release3
      #   id: release3
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "/UPReleaseDir/*"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag:  "v3.0.0"

      # - name: download release
      #   uses: robinraju/release-downloader@v1.2
      #   with:
      #     repository: ${{ github.event.repository.owner.login }}/${{ github.event.repository.name }}
      #     tag: "v1.0.0"
      #     fileName: "*"
      #     # zipBall: true
      #     # tarBall: true
      #     out-file-path: "DLReleaseDir"  #$GITHUB_WORKSPACE/DLReleaseDir
      # - name: show download files
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     ls -al
      #     cd $GITHUB_WORKSPACE/DLReleaseDir
      #     ls -al


      # - name: Remove one Release
      #   uses: dev-drprasad/delete-tag-and-release@v0.2.0
      #   with:
      #     delete_release: true
      #     tag_name: v1.0.0
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # - name: Remove one Release
      #   uses: dev-drprasad/delete-tag-and-release@v0.2.0
      #   with:
      #     delete_release: true
      #     tag_name: v2.0.0
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # - name: Remove one Release
      #   uses: dev-drprasad/delete-tag-and-release@v0.2.0
      #   with:
      #     delete_release: true
      #     tag_name: v3.0.0
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}